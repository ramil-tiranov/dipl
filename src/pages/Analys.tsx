import React, { useState } from 'react';
import '../styles/Analys.css';

const UploadPage: React.FC = () => {
  const [files, setFiles] = useState<FileList | null>(null);
  const [mode, setMode] = useState<string>('');
  const [uploadStatus, setUploadStatus] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [reportUuid, setReportUuid] = useState<string>('');

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setFiles(e.target.files);
    }
  };

  const handleUpload = async () => {
    if (!files || files.length === 0) {
      setUploadStatus('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.');
      return;
    }

    const formData = new FormData();
    formData.append('file', files[0]);

    try {
      setIsLoading(true);
      setUploadStatus('–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞...');

      const response = await fetch(`http://localhost:8000/vulnerability-detector/create-report${mode ? `?mode=${mode}` : ''}`, {
        method: 'POST',
        body: formData,
        credentials: 'include',
      });

      if (response.ok) {
        const data = await response.json();
        setReportUuid(data.uuid);

        setUploadStatus('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑! –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –Ω–∏–∂–µ.');
      } else {
        setUploadStatus(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status}`);
        setReportUuid('');
      }
    } catch (error) {
      console.error('Upload error:', error);
      setUploadStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.');
      setReportUuid('');
    } finally {
      setIsLoading(false);
    }
  };

  const handleDownload = async () => {
    if (!reportUuid) return;

    try {
      const response = await fetch(`http://localhost:8000/vulnerability-detector/${reportUuid}/download`, {
        method: 'GET',
        credentials: 'include',
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞');
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);

      const a = document.createElement('a');
      a.href = url;
      a.download = 'report.zip'; // <-- —Å–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∫ ZIP
      document.body.appendChild(a);
      a.click();
      a.remove();
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Download error:', error);
      setUploadStatus('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.');
    }
  };

  return (
    <div className="upload-container">
      <h1>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ø–∞–ø–∫–∏</h1>
      <p>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.</p>

      <div className="upload-controls">
        <label className="upload-button">
          üìÑ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
          <input type="file" onChange={handleFileChange} />
        </label>

        <input
          type="text"
          placeholder="–†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, sql)"
          value={mode}
          onChange={(e) => setMode(e.target.value)}
          className="mode-input"
        />

        <button className="upload-button" onClick={handleUpload}>
          üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∞–Ω–∞–ª–∏–∑
        </button>
      </div>

      {files && (
        <div className="file-list">
          <h2>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª:</h2>
          <pre>{files[0].name}</pre>
        </div>
      )}

      {isLoading && (
        <div className="loading">
          <p>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏ –∞–Ω–∞–ª–∏–∑...</p>
        </div>
      )}

      {uploadStatus && (
        <div className="upload-status">
          <p>{uploadStatus}</p>
        </div>
      )}

      {reportUuid && (
        <div className="download-link">
          <button className="upload-button" onClick={handleDownload}>
            üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (ZIP)
          </button>
        </div>
      )}
    </div>
  );
};

export default UploadPage;
