import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom'; // –î–æ–±–∞–≤–ª—è–µ–º useNavigate
import '../styles/Home.css';

const features = [
  "–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤",
  "–ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏",
  "–ö—Ä–∞—Å–∏–≤—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
  "–í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –º–µ—Å—Ç"
];

const HomePage: React.FC = () => {
  const navigate = useNavigate(); // –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –∫–ª–∏–∫—É
  const [stage, setStage] = useState<number>(0);
  const processStages = [
    { icon: 'üë§', text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª' },
    { icon: 'üì§', text: '–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä' },
    { icon: 'üñ•Ô∏è', text: '–°–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª' },
    { icon: 'üîç', text: '–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞' },
    { icon: 'üìä', text: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞' },
    { icon: 'üì©', text: '–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞' },
    { icon: '‚úÖ', text: '–ì–æ—Ç–æ–≤–æ!' }
  ];

  // –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è features
  const featuresRef = useRef<HTMLDivElement>(null);
  const [featuresVisible, setFeaturesVisible] = useState(false);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setFeaturesVisible(true);
        }
      },
      { threshold: 0.3 }
    );

    if (featuresRef.current) observer.observe(featuresRef.current);
    return () => {
      if (featuresRef.current) observer.unobserve(featuresRef.current);
    };
  }, []);

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
  useEffect(() => {
    const timer = setInterval(() => {
      setStage(prev => (prev + 1) % processStages.length);
    }, 1500);
    return () => clearInterval(timer);
  }, [processStages.length]);

  return (
    <div className="page-wrapper">
      {/* Hero + Features Section –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ */}
      <div className="hero-section">
        <div className="hero-content">
          <h1>Code Vulnerability Analysis</h1>
          <div className="hero-description">
            <p>
              –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à –∫–æ–¥ –∏–ª–∏
              –ø—Ä–æ–µ–∫—Ç, –∏ –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–≥–æ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ
              <span className="highlight"> —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π</span> –∏–ª–∏
              <span className="highlight"> –æ—à–∏–±–æ–∫</span>.
            </p>
            <p>–ú—ã –¥–µ–ª–∞–µ–º –≤–∞—à—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ.</p>
          </div>

          {/* Features Block –≤–Ω—É—Ç—Ä–∏ Hero */}
          <section className="features" ref={featuresRef}>
            <h2>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ?</h2>
            <div className="features-marquee">
              <div className="features-track">
                {[...features].map((item, index) => (
                  <div className="feature-item" key={index}>
                    {item}
                  </div>
                ))}
              </div>
              <div className="features-fade left"></div>
              <div className="features-fade right"></div>
            </div>
          </section>

          
        </div>
      </div>

      {/* Process Animation Section */}
      <div className="process-section">
        <div className="section-header">
          <h2>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</h2>
          <p>–í–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç</p>
        </div>
        <div className="process-line">
          {processStages.map((item, index) => (
            <div 
              key={index}
              className={`process-step ${index === stage ? 'active' : ''} ${index < stage ? 'completed' : ''}`}
            >
              <div className="step-icon">{item.icon}</div>
              <div className="step-text">{item.text}</div>
              {index < processStages.length - 1 && (
                <div className={`step-connector ${index < stage ? 'completed' : ''}`}></div>
              )}
            </div>
          ))}
        </div>
        {/* –ö–Ω–æ–ø–∫–∞ - –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ features */}
        {featuresVisible && (
            <button
              className="cta-button"
              onClick={() => navigate('/analysis')}
              style={{ marginTop: '2rem' }}
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å
            </button>
          )}
      </div>
    </div>
  );
};

export default HomePage;
